package com.example.ui_api.Home_flow

import com.example.ui_api.Home_flow.modol.TaskViewModel
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.ui_api.R

@Composable
fun TaskTopBox() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(10.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(
            modifier = Modifier
                .size(100.dp)
                .clip(RoundedCornerShape(16.dp))
                .background(Color(0xFFB2DCEE)),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(8.dp)
            ) {
                Text(
                    text = "UTH",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF276C2A)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "University of Transport\nHo Chi Minh City",
                    fontSize = 10.sp,
                    color = Color.Red,
                    lineHeight = 14.sp,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }

        Spacer(modifier = Modifier.width(16.dp))

        Column(modifier = Modifier.weight(1f)) {
            Text(
                text = "SmartTasks",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF2196F3)
            )
            Text(
                text = "A simple and efficient to-do app",
                fontSize = 10.sp,
                color = Color(0xFF5EA4D3),
            )
        }

        Image(
            painter = painterResource(id = R.drawable.chuong),
            contentDescription = "Notification",
            modifier = Modifier.size(32.dp)
        )
    }
}

@Composable
fun TaskListScreen(viewModel: TaskViewModel = viewModel(),
    // Gi·∫£ s·ª≠ b·∫°n truy·ªÅn NavController ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
                   onTaskClick: (Int) -> Unit ) {
    val tasks by viewModel.tasks.collectAsState()
    Box(modifier = Modifier.fillMaxSize()) {
        Column(modifier = Modifier.fillMaxSize()) {
            TaskTopBox()
            if (tasks.isEmpty()) {
                // üëâ N·∫øu kh√¥ng c√≥ task th√¨ hi·ªÉn th·ªã NoTasks
                NoTasks(onBackClick = {
                    // x·ª≠ l√Ω quay l·∫°i n·∫øu c·∫ßn, ho·∫∑c c√≥ th·ªÉ ƒë·ªÉ tr·ªëng
                })
            } else {

                LazyColumn(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f),
                    contentPadding = PaddingValues(start = 10.dp, end = 10.dp, bottom = 100.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    itemsIndexed(tasks) { index, task ->
                        TaskCard(
                            task = task,
                            backgroundColor = generateColor(index),
                            onDelete = { viewModel.deleteTask(task.id) },
                            onClick = {
                                // G·ªçi h√†m ƒëi·ªÅu h∆∞·ªõng v√† truy·ªÅn ID c·ªßa task
                                onTaskClick(task.id)
                            }
                        )
                    }
                }
            }
            StaticImageFooter()
        }

    }
}

@Composable
fun StaticImageFooter() {
    // S·ª≠ d·ª•ng Box ƒë·ªÉ x·∫øp ch·ªìng c√°c th√†nh ph·∫ßn l√™n nhau
    Box(
        // CƒÉn ch·ªânh t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ con v√†o gi·ªØa-d∆∞·ªõi c·ªßa Box
        contentAlignment = Alignment.BottomCenter,
        modifier = Modifier
            .fillMaxWidth()
            // ƒê·∫∑t n·ªÅn tr·∫Øng nh∆∞ b·∫°n y√™u c·∫ßu
            .background(Color.White)
            .padding(bottom = 30.dp)
    ) {
        // 1. H√¨nh ·∫£nh n·ªÅn (thanh ƒëi·ªÅu h∆∞·ªõng) - ƒë∆∞·ª£c v·∫Ω tr∆∞·ªõc
        Image(
            painter = painterResource(id = R.drawable.item), // T·∫£i ·∫£nh t·ª´ drawable
            contentDescription = "Navigation items bar",
            modifier = Modifier.fillMaxWidth(),
            contentScale = ContentScale.FillWidth // ƒê·∫£m b·∫£o ·∫£nh tr·∫£i d√†i h·∫øt chi·ªÅu r·ªông
        )

        // 2. H√¨nh ·∫£nh n√∫t c·ªông - ƒë∆∞·ª£c v·∫Ω sau, n√™n s·∫Ω n·∫±m tr√™n
        Image(
            painter = painterResource(id = R.drawable.add), // T·∫£i ·∫£nh t·ª´ drawable
            contentDescription = "Add button",
            // N√∫t c·ªông s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c cƒÉn gi·ªØa-d∆∞·ªõi do contentAlignment c·ªßa Box
            // Th√™m m·ªôt ch√∫t padding ·ªü d∆∞·ªõi ƒë·ªÉ n√¢ng n√≥ l√™n n·∫øu c·∫ßn
            modifier = Modifier
                .padding(bottom = 5.dp)
                .size(100.dp)
        )
    }
}

@Composable
fun NoTasks(
    modifier: Modifier = Modifier,
    onBackClick: () -> Unit = {}
) { // Th√™m modifier ƒë·ªÉ c√≥ th·ªÉ t√πy ch·ªânh t·ª´ b√™n ngo√†i
    Column(
        modifier = modifier.fillMaxSize(), // S·ª≠ d·ª•ng modifier ƒë∆∞·ª£c truy·ªÅn v√†o
        //verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 8.dp)
                .clickable { onBackClick() },

            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.back), // THAY TH·∫æ ID ·∫¢NH C·ª¶A B·∫†N
                contentDescription = "quay lai",
                modifier = Modifier.size(50.dp) // K√≠ch th∆∞·ªõc v√≠ d·ª•
            )
            Text(
                text = "List",
                fontSize = 20.sp,
                color = Color.Blue,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.weight(1f), // Quan tr·ªçng: Text chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
                textAlign = androidx.compose.ui.text.style.TextAlign.Center // CƒÉn gi·ªØa n·ªôi dung Text trong kh√¥ng gian c·ªßa n√≥
            )
        }
        // Gi·∫£ s·ª≠ R.drawable.no_tasks_image l√† ·∫£nh b·∫°n mu·ªën hi·ªÉn th·ªã
        Image(
            painter = painterResource(id = R.drawable.notasks), // THAY TH·∫æ ID ·∫¢NH C·ª¶A B·∫†N
            contentDescription = "No Tasks Available",
            modifier = Modifier.size(350.dp) // K√≠ch th∆∞·ªõc v√≠ d·ª•
        )
        Text("Kh√¥ng c√≥ c√¥ng vi·ªác n√†o", fontSize = 18.sp, color = Color.Gray)
        Spacer(modifier = Modifier.weight(1f))

        StaticImageFooter()
    }

}

// K·∫øt th√∫c c√°c Composable gi·∫£ s·ª≠
fun generateColor(index: Int): Color {
    val colors = listOf(
        Color(0xFFFFCDD2), Color(0xFFC8E6C9),
        Color(0xFFBBDEFB), Color(0xFFFFF9C4),
        Color(0xFFD1C4E9)
    )
    return colors[index % colors.size]
}

@Preview(showBackground = true)
@Composable
fun FakePreview() {
    val fakeTasks = listOf(
        Task(
            id = 1,
            title = "Ho√†n th√†nh b√°o c√°o d·ª± √°n Alpha",
            description = "Vi·∫øt ph·∫ßn t·ªïng k·∫øt, ph√¢n t√≠ch s·ªë li·ªáu v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p cho d·ª± √°n Alpha. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
            status = "In Progress",
            priority = "High",
            category = "Work",
            dueDate = "2023-12-15 17:00",
            createdAt = "2023-11-20 09:15:30",
            updatedAt = "2023-11-22 14:05:00"
        ),
        Task(
            id = 1,
            title = "Ho√†n th√†nh b√°o c√°o d·ª± √°n Alpha",
            description = "Vi·∫øt ph·∫ßn t·ªïng k·∫øt, ph√¢n t√≠ch s·ªë li·ªáu v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p cho d·ª± √°n Alpha. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
            status = "In Progress",
            priority = "High",
            category = "Work",
            dueDate = "2023-12-15 17:00",
            createdAt = "2023-11-20 09:15:30",
            updatedAt = "2023-11-22 14:05:00"
        )
    )
    Box(modifier = Modifier.fillMaxSize()) {

        Column {
            TaskTopBox()

            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .weight(1f), // ‚ú® Cho LazyColumn chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
                verticalArrangement = Arrangement.spacedBy(12.dp),
                contentPadding = PaddingValues(start = 10.dp, end = 10.dp, bottom = 100.dp)

            ) {
                itemsIndexed(fakeTasks) { index, task ->
                    TaskCard(
                        task = task,
                        backgroundColor = generateColor(index),
                        onDelete = {},
                        onClick = {}
                    )
                }
            }

        }
    }

}

// ---- Preview ----

@Preview(showBackground = true, name = "AddItemScreen - Item Selected State")
@Composable
fun AddItemScreenSelectedPreview() {
    MaterialTheme {
        // ƒê·ªÉ preview tr·∫°ng th√°i ƒë√£ ch·ªçn, ta c·∫ßn m√¥ ph·ªèng vi·ªác itemSelected = true
        // C√°ch ƒë∆°n gi·∫£n l√† t·∫°o m·ªôt Composable ri√™ng cho tr·∫°ng th√°i n√†y ho·∫∑c d√πng LaunchedEffect
        // ·ªü ƒë√¢y ta s·∫Ω t·∫°o m·ªôt Composable ƒë∆°n gi·∫£n h∆°n:
        Column(modifier = Modifier.fillMaxSize()) {
            NoTasks(modifier = Modifier.weight(1f))
        }
    }
}
